requires std.stream
requires std.io
requires std.pubsub.inmemory

let TOPIC = 'my-topic'

let broker: Broker = Broker.inMemory()

; We are going to treat a topic as a stream of messages
let myTopic: Stream = broker.topicAsStream(TOPIC)
myTopic.filter(?.headers.cool).map(?.content.toUpperCase()).map('>> ' + ?).forEach(println)

; We are going to read from a topic using a handler function
let subscription = broker.subscribeTo(TOPIC, println)

; Publish messages
let publisher: Publisher = broker.publisherFor(TOPIC)
publisher.publish(Message('this is a cool message', { cool: true }))
publisher.publish(Message('this is a not so cool message', { cool: false }))

exit()