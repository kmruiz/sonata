"use strict";function _(){let y,x=new Promise(function(r){y=r});return[x,y]}function _$(p){return Array.prototype.slice.call(p)}function SI(a,b){return setInterval(a,b)}function CI(a){clearInterval(a)}function PS(s,f){return function(){const a=_$(arguments);const v=_();const p=v[0];const r=v[1];s._m$.push(function(){r(f.apply(null,a))});return p}}function DQ(s){return function(){if(s._m$.length>0){s._m$.shift()()}}}let TIMES=10;function pinger(){let self={};self.class='pinger';self._m$=[];self._i$=SI(DQ(self),0);self.stop=PS(self,$stop$);const stop=self.stop;function $stop$(){CI(self._i$)};self.ping=PS(self,ping$);const ping=self.ping;async function ping$(ponger, time){if(time===TIMES){println('ping end');await ponger.pong(self,time);return await self.stop()}println(time+'> ping');return await ponger.pong(self,time)};return self;}function ponger(){let self={};self.class='ponger';self._m$=[];self._i$=SI(DQ(self),0);self.stop=PS(self,$stop$);const stop=self.stop;function $stop$(){CI(self._i$)};self.pong=PS(self,pong$);const pong=self.pong;async function pong$(pinger, time){if(time===TIMES){println('pong end');return await self.stop()}println(time+'> pong');return await pinger.ping(self,time+1)};return self;}let _pinger=pinger();let _ponger=ponger();_pinger.ping(_ponger,0);println('doing things asynchronously');function println(text){return console.log(text)};