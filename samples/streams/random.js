/*
 * Copyright (c) 2020 Kevin Mas Ruiz
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

"use strict";function ECP(c,C){let o={};o._p$=false;o._s$=0;o.class=c;o.contracts=C;o._m$=[];o._i$=SI(DQ(o),0);return o}function _P(){let z,y,x=new Promise(function(r, R){y=r;z=R;});return[x,y,z]}function _$(p){return Array.prototype.slice.call(p)}function SI(a,b){return setInterval(a,b)}function CI(a){clearInterval(a)}function ST(s){const F=function(){s._s$=1;if(s._m$.length>0){setTimeout(s.stop, 0)}else{CI(s._i$)}};F.messageName='stop';return F;}function PS(s,f){return function(){const a=_$(arguments);const v=_P();const p=v[0];const r=v[1];if(s._s$==0)s._m$.push(function(){r(f.apply(null,a))});else r(undefined);return p}}function DQ(s){return function(){if(s._m$.length>0){s._m$.shift()()}}}function VCE(a,b){return JSON.stringify(a)==JSON.stringify(b)}(async function (){function _StreamToken(value,complete){let self={};self.class='_StreamToken';self.value=value;self.complete=complete;return self;}function _StreamValue(value){return _StreamToken(value,false)}function _StreamComplete(){return _StreamToken('',true)}let _Provider={};(function(self){})(_Provider);function _ProvideFromArray(data,index){let self=ECP('_ProvideFromArray',['_Provider']);let $stop$ = ST(self);self.stop=PS(self,$stop$, 'stop');self.data=data;self.index=index;self.poll=PS(self,poll$, 'poll');async function poll$(){if(self.index>=self.data.length){return (await _StreamComplete())}else{let dataIndex=self.index;self.index+=1;let dataValue=self.data[dataIndex];return (await _StreamValue(dataValue))}}self.close=PS(self,close$, 'close');async function close$(){return (await self.stop())}return self;}function _ProvideFromFunction(previousValue,provider){let self=ECP('_ProvideFromFunction',['_Provider']);let $stop$ = ST(self);self.stop=PS(self,$stop$, 'stop');self.previousValue=previousValue;self.provider=provider;self.poll=PS(self,poll$, 'poll');async function poll$(){let current=(await provider(self.previousValue));self.previousValue=current;return (await _StreamValue(current))}self.close=PS(self,close$, 'close');async function close$(){return (await self.stop())}return self;}function _Concat(previous,stream,isPreviousComplete,isCurrentComplete){let self=ECP('_Concat',['_Provider']);let $stop$ = ST(self);self.stop=PS(self,$stop$, 'stop');self.previous=previous;self.stream=stream;self.isPreviousComplete=isPreviousComplete;self.isCurrentComplete=isCurrentComplete;self.poll=PS(self,poll$, 'poll');async function poll$(){if(self.isPreviousComplete&&self.isCurrentComplete){return (await _StreamComplete())}else{if(self.isPreviousComplete){let val=(await self.stream.poll());if(val.complete){self.isCurrentComplete=true;return (await _StreamComplete())}else{return val}}else{let val=(await self.previous.poll());if(val.complete){self.isPreviousComplete=true;return (await self.poll())}else{return val}}}}self.close=PS(self,close$, 'close');async function close$(){await self.previous.close();await self.stream.close();return (await self.stop())}return self;}function _Filter(previous,fn){let self=ECP('_Filter',['_Provider']);let $stop$ = ST(self);self.stop=PS(self,$stop$, 'stop');self.previous=previous;self.fn=fn;self.poll=PS(self,poll$, 'poll');async function poll$(){let val=(await self.previous.poll());if(val.complete){return (await _StreamComplete())}else{if((await self.fn(val.value))){return val}else{return (await self.poll())}}}self.close=PS(self,close$, 'close');async function close$(){return (await self.stop())}return self;}function _FlatMap(previous,currentStream,isCurrentComplete,fn){let self=ECP('_FlatMap',['_Provider']);let $stop$ = ST(self);self.stop=PS(self,$stop$, 'stop');self.previous=previous;self.currentStream=currentStream;self.isCurrentComplete=isCurrentComplete;self.fn=fn;self.poll=PS(self,poll$, 'poll');async function poll$(){if(self.isCurrentComplete){await self.currentStream.close();let newValue=(await self.previous.poll());if(newValue.complete){self.isCurrentComplete=true;return (await _StreamComplete())}else{self.isCurrentComplete=false;self.currentStream=(await self.fn(newValue.value));return (await self.pollCurrent())}}else{return (await self.pollCurrent())}}self.pollCurrent=PS(self,pollCurrent$, 'pollCurrent');async function pollCurrent$(){let streamValue=(await self.currentStream.poll());if(streamValue.complete){self.isCurrentComplete=true;return (await self.poll())}else{self.isCurrentComplete=false;return streamValue}}self.close=PS(self,close$, 'close');async function close$(){await self.currentStream.close();return (await self.stop())}return self;}function _Fold(previous,apply,current,complete){let self=ECP('_Fold',['_Provider']);let $stop$ = ST(self);self.stop=PS(self,$stop$, 'stop');self.previous=previous;self.apply=apply;self.current=current;self.complete=complete;self.poll=PS(self,poll$, 'poll');async function poll$(){if(self.complete){return (await _StreamComplete())}else{let token=(await previous.poll());if(token.complete){self.complete=true;return (await _StreamValue(self.current))}else{self.current=(await self.apply(self.current,token.value));return (await self.poll())}}}self.close=PS(self,close$, 'close');async function close$(){await self.previous.close();return (await self.stop())}return self;}function _ForEach(previous,apply){let self=ECP('_ForEach',['_Provider']);let $stop$ = ST(self);self.stop=PS(self,$stop$, 'stop');self.previous=previous;self.apply=apply;self.poll=PS(self,poll$, 'poll');async function poll$(){let token=(await previous.poll());if((VCE(token.complete,false))){await apply(token.value);return (await self.poll())}}self.close=PS(self,close$, 'close');async function close$(){return (await self.stop())}return self;}function _Map(previous,fn){let self=ECP('_Map',['_Provider']);let $stop$ = ST(self);self.stop=PS(self,$stop$, 'stop');self.previous=previous;self.fn=fn;self.poll=PS(self,poll$, 'poll');async function poll$(){return (await self.process((await self.previous.poll())))}self.process=PS(self,process$, 'process');async function process$(token){let value=token.value;let complete=token.complete;if(complete===true){return await _StreamComplete();}if(token.class==='_StreamToken'){return await _StreamValue((await self.fn(token.value)));}}self.close=PS(self,close$, 'close');async function close$(){return (await self.stop())}return self;}function _Take(previous,number,processed){let self=ECP('_Take',['_Provider']);let $stop$ = ST(self);self.stop=PS(self,$stop$, 'stop');self.previous=previous;self.number=number;self.processed=processed;self.poll=PS(self,poll$, 'poll');async function poll$(){if(self.processed>=self.number){return (await _StreamComplete())}else{self.processed+=1;return (await self.previous.poll())}}self.close=PS(self,close$, 'close');async function close$(){return (await self.stop())}return self;}function _TakeWhile(previous,condition,complete){let self=ECP('_TakeWhile',['_Provider']);let $stop$ = ST(self);self.stop=PS(self,$stop$, 'stop');self.previous=previous;self.condition=condition;self.complete=complete;self.poll=PS(self,poll$, 'poll');async function poll$(){if(self.complete){return (await _StreamComplete())}else{let token=(await previous.poll());if((VCE(token.complete,false))){if((await self.condition(token.value))){return token}else{self.complete=true;return (await _StreamComplete())}}else{self.complete=true;return (await _StreamComplete())}}}self.close=PS(self,close$, 'close');async function close$(){return (await self.stop())}return self;}function _WaitForResult(previous){let self=ECP('_WaitForResult',['_Provider']);let $stop$ = ST(self);self.stop=PS(self,$stop$, 'stop');self.previous=previous;self.poll=PS(self,poll$, 'poll');async function poll$(){let token=(await previous.poll());if(token.complete){return []}else{return (await [token.value,].concat((await self.poll())))}}self.close=PS(self,close$, 'close');async function close$(){return (await self.stop())}return self;}function _ZipFirst(previous,other,complete){let self=ECP('_ZipFirst',['_Provider']);let $stop$ = ST(self);self.stop=PS(self,$stop$, 'stop');self.previous=previous;self.other=other;self.complete=complete;self.poll=PS(self,poll$, 'poll');async function poll$(){if(self.complete){return (await _StreamComplete())}else{let all=(await Promise.all([self.previous,self.other,].map(async function(a){return (await a.poll())})));let left=all[0];let right=all[1];if(left.complete||right.complete){self.complete=true;return (await _StreamComplete())}else{return (await _StreamValue([left.value,right.value,]))}}}self.close=PS(self,close$, 'close');async function close$(){await self.previous.close();await self.other.close();return (await self.stop())}return self;}function println(text){return console.log(text)}function _ZipLast(previous,other,leftCompleted,rightCompleted,leftDefault,rightDefault){let self=ECP('_ZipLast',['_Provider']);let $stop$ = ST(self);self.stop=PS(self,$stop$, 'stop');self.previous=previous;self.other=other;self.leftCompleted=leftCompleted;self.rightCompleted=rightCompleted;self.leftDefault=leftDefault;self.rightDefault=rightDefault;self.poll=PS(self,poll$, 'poll');async function poll$(){if((await self.complete())){return (await _StreamComplete())}else{let all=(await Promise.all([self.previous,self.other,].map(async function(a){return (await a.poll())})));let left=all[0];let right=all[1];await self.whenComplete(left,function(){return self.leftCompleted=true});await self.whenComplete(right,function(){return self.rightCompleted=true});if((await self.complete())){return (await _StreamComplete())}else{return (await _StreamValue([(await self.valueOrDefault(left,self.leftDefault)),(await self.valueOrDefault(right,self.rightDefault)),]))}}}self.complete=PS(self,complete$, 'complete');async function complete$(){return self.leftCompleted&&self.rightCompleted}self.valueOrDefault=PS(self,valueOrDefault$, 'valueOrDefault');async function valueOrDefault$(token, defaultVal){let value=token.value;let complete=token.complete;if(complete===true&&true){return defaultVal;}if(token.class==='_StreamToken'&&true){return token.value;}}self.whenComplete=PS(self,whenComplete$, 'whenComplete');async function whenComplete$(token, apply){let value=token.value;let complete=token.complete;if(complete===true&&apply.apply!==undefined){return await apply();}if(token.class==='_StreamToken'&&apply.apply!==undefined){return ({})}}self.close=PS(self,close$, 'close');async function close$(){await self.previous.close();await self.other.close();return (await self.stop())}return self;}function _ZipWithIndex(previous,count){let self=ECP('_ZipWithIndex',['_Provider']);let $stop$ = ST(self);self.stop=PS(self,$stop$, 'stop');self.previous=previous;self.count=count;self.poll=PS(self,poll$, 'poll');async function poll$(){let val=(await self.previous.poll());let index=self.count;self.count+=1;if(val.complete){return (await _StreamComplete())}else{return (await _StreamValue([val.value,index,]))}}self.close=PS(self,close$, 'close');async function close$(){await self.previous.close();return (await self.stop())}return self;}function Range(from, to){if(from>=to){return [];}else{return [from,].concat(Range(from+1,to));}}let Stream={};(function(self){self.fromArray=async function fromArray(array){return (await _PollBasedStream([(await _ProvideFromArray(array,0)),]))};self.fromSupplier=async function fromSupplier(firstValue, fn){return (await _PollBasedStream([(await _ProvideFromFunction(firstValue,fn)),]))};self.fromRange=async function fromRange(from, to){return (await Stream.fromArray(Range(from,to)))};})(Stream);function _PollBasedStream(chain){let self=ECP('_PollBasedStream',['_Provider','Stream']);let $stop$ = ST(self);self.stop=PS(self,$stop$, 'stop');self.chain=chain;self.array=PS(self,array$, 'array');async function array$(){await self.chain.push((await _WaitForResult((await self.last()))));let result=(await (await self.last()).poll());await self.close();return result}self.fold=PS(self,fold$, 'fold');async function fold$(initial, apply){await self.chain.push((await _Fold((await self.last()),apply,initial,false)));let result=(await (await self.last()).poll());await self.close();return result.value}self.forEach=PS(self,forEach$, 'forEach');async function forEach$(apply){await self.chain.push((await _ForEach((await self.last()),apply)));await (await self.last()).poll();return (await self.close())}self.take=PS(self,take$, 'take');async function take$(num){await self.chain.push((await _Take((await self.last()),num,0)));return self}self.takeWhile=PS(self,takeWhile$, 'takeWhile');async function takeWhile$(condition){await self.chain.push((await _TakeWhile((await self.last()),condition,false)));return self}self.concat=PS(self,concat$, 'concat');async function concat$(stream){await self.chain.push((await _Concat((await self.last()),stream,false,false)));return self}self.map=PS(self,map$, 'map');async function map$(fn){await self.chain.push((await _Map((await self.last()),fn)));return self}self.flatMap=PS(self,flatMap$, 'flatMap');async function flatMap$(fn){await self.chain.push((await _FlatMap((await self.last()),(await Stream.fromArray([])),true,fn)));return self}self.zipFirst=PS(self,zipFirst$, 'zipFirst');async function zipFirst$(other){await self.chain.push((await _ZipFirst((await self.last()),other,false)));return self}self.zipLast=PS(self,zipLast$, 'zipLast');async function zipLast$(other, defaultLeft, defaultRight){await self.chain.push((await _ZipLast((await self.last()),other,false,false,defaultLeft,defaultRight)));return self}self.zipWithIndex=PS(self,zipWithIndex$, 'zipWithIndex');async function zipWithIndex$(){await self.chain.push((await _ZipWithIndex((await self.last()),0)));return self}self.filter=PS(self,filter$, 'filter');async function filter$(predicate){await self.chain.push((await _Filter((await self.last()),predicate)));return self}self.poll=PS(self,poll$, 'poll');async function poll$(){return (await (await self.last()).poll())}self.close=PS(self,close$, 'close');async function close$(){await self.chain.forEach(async function(a){return (await a.close())});return (await self.stop())}self.last=PS(self,last$, 'last');async function last$(){return self.chain[self.chain.length-1]}return self;}function printRandomValue(v){let index=v[1];let value=v[0];if(value&&index){return println(({value:value,index:index}));}if(v.slice!==undefined){return 0;}}await (await (await (await Stream.fromSupplier(1,Math.random)).zipWithIndex()).take(10)).forEach(printRandomValue);})();