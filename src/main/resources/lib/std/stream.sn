requires std.stream.providers._Provider
requires std.stream.providers._ProvideFromArray
requires std.stream.providers._ProvideFromFunction
requires std.stream._Concat
requires std.stream._Filter
requires std.stream._FlatMap
requires std.stream._Fold
requires std.stream._ForEach
requires std.stream._Map
requires std.stream._Take
requires std.stream._TakeWhile
requires std.stream._WaitForResult
requires std.stream._ZipFirst
requires std.stream._ZipLast
requires std.stream._ZipWithIndex
requires std.range

contract Stream {
    let array(): any[]
    let fold(initial: any, apply: (any, any) -> any): any
    let forEach(apply: (any) -> any): any
    let take(num: number): Stream
    let takeWhile(condition: (any) -> boolean): Stream
    let concat(stream: Stream): Stream
    let map(fn: (any) -> any): Stream
    let flatMap(fn: (any) -> Stream): Stream
    let zipFirst(other: Stream): Stream
    let zipLast(other: Stream, defaultLeft: any, defaultRight: any): Stream
    let zipWithIndex(): Stream
    let filter(predicate: (any) -> boolean): Stream

    class let fromArray(array: any[]): Stream = _PollBasedStream([_ProvideFromArray(array, 0)])
    class let fromSupplier(firstValue: any, fn: (any) -> any): Stream = _PollBasedStream([_ProvideFromFunction(firstValue, fn)])
    class let fromRange(from: number, to: number): Stream = Stream.fromArray(Range(from, to))
}

entity class _PollBasedStream(chain: _Provider[]) implements _Provider, Stream {
    let array() = {
        self.chain.push(_WaitForResult(self.last()))
        let result = self.last().poll()
        self.close()
        result
    }

    let fold(initial: any, apply: (any, any) -> any) = {
        self.chain.push(_Fold(self.last(), apply, initial, false))
        let result = self.last().poll()
        self.close()
        result.value
    }

    let forEach(apply: (any) -> any) = {
        self.chain.push(_ForEach(self.last(), apply))
        let _ = self.last().poll()
        self.close()
    }

    let take(num: number) = {
        self.chain.push(_Take(self.last(), num, 0))
        self
    }

    let takeWhile(condition: (any) -> boolean) = {
        self.chain.push(_TakeWhile(self.last(), condition, false))
        self
    }

    let concat(stream: Stream) = {
        self.chain.push(_Concat(self.last(), stream, false, false))
        self
    }

    let map(fn: (any) -> any) = {
        self.chain.push(_Map(self.last(), fn))
        self
    }

    let flatMap(fn: (any) -> Stream) = {
        self.chain.push(_FlatMap(self.last(), Stream.fromArray([]), true, fn))
        self
    }

    let zipFirst(other: Stream) = {
        self.chain.push(_ZipFirst(self.last(), other, false))
        self
    }

    let zipLast(other: Stream, defaultLeft: any, defaultRight: any) = {
        self.chain.push(_ZipLast(self.last(), other, false, false, defaultLeft, defaultRight))
        self
    }

    let zipWithIndex() = {
        self.chain.push(_ZipWithIndex(self.last(), 0))
        self
    }

    let filter(predicate: (any) -> boolean) = {
        self.chain.push(_Filter(self.last(), predicate))
        self
    }

    let poll() = self.last().poll()
    let close() = {
        self.chain.forEach(?.close())
        self.stop()
    }

    let last() = self.chain[self.chain.length - 1]
}