value class _StreamToken(value: any, complete: boolean)

let _StreamValue(value: any): _StreamToken = _StreamToken(value, false)
let _StreamComplete(): _StreamToken = _StreamToken('', true)

contract _Provider {
    let poll(): _StreamToken
}

entity class _ProvideFromArray(data: any[], index: number) implements _Provider {
    let poll(): _StreamToken = if (self.index >= self.data.length) {
            _StreamComplete()
        } else {
            let dataIndex = self.index
            self.index += 1

            let dataValue = self.data[dataIndex]
            _StreamValue(dataValue)
        }
    }
}

entity class _ProvideFromFunction(provider: () -> any) implements _Provider {
    let poll(): _StreamToken = _StreamValue(provider())
}

entity class _Take(previous: _Provider, number: number, processed: number) implements _Provider {
    let poll(): _StreamToken = if (self.processed >= self.number) {
            _StreamComplete()
        } else {
            self.processed += 1
            previous.poll()
        }
    }
}

entity class _Map(previous: _Provider, fn: (any) -> any) implements _Provider {
    let poll(): _StreamToken = self.process(previous.poll())

    let process(token: _StreamToken) = _StreamValue(fn(token.value))
    let process(_StreamToken(value, true)) = _StreamComplete()
}

entity class _WaitForResult(previous: _Provider) implements _Provider {
    let poll(): _StreamToken = {
        let token: _StreamToken = previous.poll()
        if (token == _StreamComplete()) {
            []
        } else {
            [token.value].concat(self.poll())
        }
    }
}

entity class Stream(chain: _Provider[]) {
    let array() = {
        self.chain.push(_WaitForResult(self.chain[self.chain.length - 1]))
        let result = self.chain[self.chain.length - 1].poll()
        self.chain.forEach(?.stop())
        self.stop()
        result
    }

    let take(num: number) = {
        self.chain.push(_Take(self.chain[self.chain.length - 1], num, 0))
        self
    }

    let map(fn: (any) -> any) = {
        self.chain.push(_Map(self.chain[self.chain.length - 1], fn))
        self
    }
}

let StreamFromArray(array: any[]) = Stream([_ProvideFromArray(array, 0)])
let StreamFromFunction(fn: (any) -> any) = Stream([_ProvideFromFunction(fn)])

