requires std.stream.providers._Provider

value class Message(content: any, headers: record)
value class Subscription(id: string, topic: string, handler: (Message) -> any)

contract Publisher {
    let publish(message: Message)
}

contract Broker {
    let publisherFor(topic: string): Publisher
    let topicAsStream(topic: string): Stream

    let subscribeTo(topic: string, handler: (Message) -> any): Subscription
    let unsubscribe(subscription: Subscription)

    class let memory() = InMemoryBroker([], 1)
}

entity class _BrokerTopicAsProvider(broker: Broker, topic: string, subscription: Subscription, queue: Message[], complete: boolean) implements _Provider {
    let poll() = {
        if (self.queue.length > 0) {
            let message = self.queue.splice(0, 1)[0]
            _StreamValue(message)
        } else {
            if (self.complete) {
                self.stop()
                _StreamComplete()
            } else {
                self.poll()
            }
        }
    }

    let subscriptionHandler(message: Message) = {
        self.queue.push(message)
    }

    let close() = {
        self.broker.unsubscribe(self.subscription)
        self.complete = true
    }

    self.subscription = self.broker.subscribeTo(topic, self.subscriptionHandler)
}